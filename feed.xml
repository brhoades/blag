<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.6.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-08-10T13:35:32-05:00</updated><id>/</id><title type="html">Billy Rhoades</title><subtitle></subtitle><entry><title type="html">One-on-Ones Are Mandatory</title><link href="/management/2019/07/29/one-on-ones.html" rel="alternate" type="text/html" title="One-on-Ones Are Mandatory" /><published>2019-07-29T00:00:00-05:00</published><updated>2019-07-29T00:00:00-05:00</updated><id>/management/2019/07/29/one-on-ones</id><content type="html" xml:base="/management/2019/07/29/one-on-ones.html">&lt;p&gt;One on ones are one of the most important tools that a manager has. You either have effective, regular, clear 1-on-1s or you pay in employee retention, satisfaction, and development.&lt;/p&gt;

&lt;h1 id=&quot;why-i-am-writing-this&quot;&gt;Why I am Writing This&lt;/h1&gt;
&lt;p&gt;As an engineer, 1-on-1s were important to me. They gave an opportunity to bring topics to my manager that otherwise didn’t have an outlet, receive and provide feedback, and track successes and failures throughout the year. Unfortunately, 1-on-1s aren’t mandatory at Cerner; yet for me, they were the reason that I hit 2 years and became a team lead.&lt;/p&gt;

&lt;p&gt;Today, I manage a team that handles high priority client requests while simultaneously on-boarding new engineers (365 days/yr support). I could not have survived the last year and on-boarded 5 engineers without regular, effective 1-on-1s. Now that I’m on the opposite side of 1-on-1s, I can see the traps managers fall into that lead 1-on-1s to doom:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Rescheduling, pushing back, and cancelling as something “critical” came up.&lt;/li&gt;
  &lt;li&gt;Ending early / starting late frequently.&lt;/li&gt;
  &lt;li&gt;Neither participant drives or the meeting is too unstructured.&lt;/li&gt;
  &lt;li&gt;Conversation and information is one way.&lt;/li&gt;
  &lt;li&gt;Surface-level topics and recent events are discussed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;one-on-ones-are-bidirectional&quot;&gt;One-on-Ones Are Bidirectional&lt;/h2&gt;
&lt;p&gt;Misleading my reports into believing that 1-on-1s are their meetings communicates what I want out of the meeting. Overall, the meetings are mine and mandatory; but it is for my report’s growth to our team’s benefit. My intention in “giving” them the meeting is to set the stage that this meeting doesn’t exist without them and that they set the agenda.&lt;/p&gt;

&lt;h3 id=&quot;one-on-ones-need-structure-and-regularity&quot;&gt;One-on-Ones Need Structure and Regularity&lt;/h3&gt;
&lt;p&gt;I meet twice a month for one hour each with each of my reports in a private, quiet room with our laptops. We have a meeting document for minutes, with a template that my report fills out in advance:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h1 id=&quot;date-mmddyyyy&quot;&gt;Date: MM/DD/YYYY&lt;/h1&gt;

  &lt;p&gt;&lt;em&gt;What’s going on? What have you completed?&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;em&gt;What have you learned?&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;em&gt;What’s going well? Anything to brag about?&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;em&gt;What’s blocking / challenging you? Anything we can improve?&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;em&gt;Feedback from &amp;lt;manager&amp;gt;:&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;em&gt;Feedback from &amp;lt;report&amp;gt;:&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;Flip:
      &lt;ul&gt;
        &lt;li&gt;First meeting of the month: revisit goals, achievements, and areas of opportunity.&lt;/li&gt;
        &lt;li&gt;Second meeting of the month: manager reflection.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;em&gt;Other topics / action items:&lt;/em&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Review feedback and TODOs from last meeting.&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;This template provides a clear agenda and reduces the amount of time spent digging. If the agenda isn’t filled out in advance, you must pressure them to recollect for each section. Honestly, it usually isn’t filled out ahead of time and they fill it out as I walk to the meeting room. This template also varies for each report; the question “What have you learned?” provides little value to more senior engineers versus a college apprentice.&lt;/p&gt;

&lt;p&gt;The top half of this template serves as minutes for our 1-on-1s. The contents of these sections doesn’t matter, they are purely conversation starters. If you are using this template as a way to understand what your reports are doing, you are wasting their time and hurting their development. Depending on topics, we primarily dig into and discuss each point of these first sections. Some example questions to use:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How was that?&lt;/li&gt;
  &lt;li&gt;Would you want to do it again, knowing what you know now? How would you change your execution?&lt;/li&gt;
  &lt;li&gt;Did you do that without assistance?&lt;/li&gt;
  &lt;li&gt;What can we do to make other tasks [not] like that?&lt;/li&gt;
  &lt;li&gt;Is there anything I can do to help next time?&lt;/li&gt;
  &lt;li&gt;Everything else went awesome/terrible?&lt;/li&gt;
  &lt;li&gt;You didn’t work on anything else this sprint, just &amp;lt;single item&amp;gt;? You didn’t learn anything else?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;feedback-and-expectations&quot;&gt;Feedback and Expectations&lt;/h3&gt;
&lt;p&gt;The most important two sections of the 1-on-1 template cover feedback. I can’t talk about feedback without giving the three steadfast rules of feedback:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You aren’t giving enough of it.&lt;/li&gt;
  &lt;li&gt;It’s not feedback unless it’s constructive, agreed upon, and makes things better.&lt;/li&gt;
  &lt;li&gt;You still aren’t giving enough of it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;positive-feedback-morale-and-timing&quot;&gt;Positive Feedback, Morale, and Timing&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/oneonones-feedback.png&quot; alt=&quot;feedback comic&quot; /&gt;
&lt;em&gt;Julie Zhuo, &lt;strong&gt;The Making of a Manager&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This comic summarizes an important point Julie Zhuo makes about feedback in &lt;a href=&quot;https://www.amazon.com/Making-Manager-What-Everyone-Looks/dp/0735219567&quot;&gt;&lt;em&gt;The Making of a Manager&lt;/em&gt;&lt;/a&gt;. People want to succeed, but it’s hard to without knowing where they stand. Positive feedback should come easy to a manager and you should have a lot of it. It can go from “I couldn’t run this team without you” to “I can tell you are struggling but really trying hard: keep at it.” Positive feedback doesn’t need to mention specific events or even be given at 1-on-1s.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You must give positive feedback&lt;/strong&gt;. The amount will vary and it’s an art; some people know where they’re at while others need regular pep talks. Whatever it takes, your reports should leave 1-on-1s with an impression of where they sit in your eyes. If they only learn where they sit with you when raises come out, &lt;strong&gt;you have failed them as a manager&lt;/strong&gt;. Whether you’re meeting expectations should never be a surprise for anyone. By waiting until the of the cycle, you have stolen your report’s agency to improve or raise the bar. Your report likely spent the year feeling uneasy about where they stand in your eyes.&lt;/p&gt;

&lt;h4 id=&quot;negative-feedback&quot;&gt;Negative Feedback&lt;/h4&gt;
&lt;p&gt;Negative feedback is harder than positive feedback for a variety of reasons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Atmosphere and relationship with your report must allow for a &lt;em&gt;conversation&lt;/em&gt; about their faults and mistakes.&lt;/li&gt;
  &lt;li&gt;Situational feedback must be given shortly after an event or else it reads passive aggressive.&lt;/li&gt;
  &lt;li&gt;Hopefully a nonzero amount of your reports exceed you in some domain and utilize those skills, leaving you groping for feedback in the dark.&lt;/li&gt;
  &lt;li&gt;Confrontation is simultaneously uncomfortable and critical.&lt;/li&gt;
  &lt;li&gt;Presenting feedback well is like making food that tastes &lt;em&gt;and&lt;/em&gt; looks good.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;atmosphere-and-relationship&quot;&gt;Atmosphere and Relationship&lt;/h5&gt;
&lt;p&gt;Poor meeting atmosphere or report relationship is the hardest issue to overcome. For me, I always open any major feedback with a variant of the following:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I am about to give you constructive feedback. I’ve spent a lot of time on this because I care about your development and want you to be awesome.
I’ll give you details about this feedback and why you are getting it, then you’ll have a chance to discuss it and agree or disagree with me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Depending on how your relationship is, you may leave out agreement. For all relationships, keep in mind that if your report doesn’t agree with your feedback, they likely won’t incorporate it.&lt;/p&gt;

&lt;p&gt;I’ve also found that prepping your reports for hard feedback becomes easier if you set expectations in a prior meeting (even the last meeting). Tell them exactly what you expect out of them with some solid metrics. For example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I expect that you:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Will be self-sufficient with coding. If you ask someone senior to you a coding question and they answer it in less than a minute, you are not meeting expectations.&lt;/li&gt;
    &lt;li&gt;Will finish 3 points of work a sprint. We can discuss specifics around larger stories / shorter sprints when they come up. If you are assigned something that isn’t a 3 pointer but is marked as one, you should yell loudly.&lt;/li&gt;
    &lt;li&gt;Will sign off (or comment why you will not) on every code review that is assigned to you.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;This gives them a cold splash of water without outright telling them that they are not meeting some invisible expectations. At the next meeting, they are either doing great and you revisit the expectations for praise or you give them the feedback you had planned. Either way, &lt;em&gt;no surprises&lt;/em&gt;. Setting expectations is critical to delivering effective and usable feedback.&lt;/p&gt;

&lt;h5 id=&quot;situational-feedback&quot;&gt;Situational Feedback&lt;/h5&gt;

&lt;p&gt;The solution to other non-relationship feedback difficulties is simpler: give more of it, more often, and ask them if you are correct. Aim for quantity, people are really good at sifting through noisy data and engineers are especially good at arguing. I can easily say that most of my feedback is less wide-reaching than outright failing to meet expectations. Zhuo has a clever way of splitting feedback up into three categories, two I’ll steal: situational feedback and behavioral feedback.&lt;/p&gt;

&lt;p&gt;Situational feedback is task-specific or accident-based. A report made a notable a mistake on a code review? I didn’t expect you to do this, let’s talk about it and how we can improve. This is fairly easy to do but it must be delivered early. A good rule of thumb for how early is to literally follow your gut. Feedback urgency is directly proportional to how uncomfortable it makes you to deliver.&lt;/p&gt;

&lt;h5 id=&quot;behavioral-second-order-feedback&quot;&gt;Behavioral, Second-Order Feedback&lt;/h5&gt;

&lt;p&gt;Behavioral feedback is more difficult; it’s second-order feedback which requires taking a step back and looking at trends. Like some poetry, behavioral feedback should have &lt;a href=&quot;https://en.wikipedia.org/wiki/Metre_(poetry)&quot;&gt;a rhyme to it&lt;/a&gt;. You should look for patterns in past feedback which could be brought to their attention. Some real examples:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Report routinely spends more time correcting their spelling and grammatical mistakes than fixing technical issues in technical documents.&lt;/li&gt;
  &lt;li&gt;Report is having issues getting work completed in the last few sprints. You’ve observed multiple times that they tend to work really fast the night before the end of the sprint.&lt;/li&gt;
  &lt;li&gt;Report always seems nervous, avoids eye contact, and shuffles to and from their desk with eyes down. You probably haven’t called this out before.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s easy when it’s written out like this, but these issues are summaries of problems that spanned multiple months. Once you put the patterns together, you call out set of actions to address this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Communication skills&lt;/em&gt;. Specifically: review your documents multiple times prior to sending them out. Run them through TTS, note the mistakes you make in a notebook, and check the list of mistakes prior to sending the next document out .&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Time management&lt;/em&gt;. Set clear mid sprint deadlines for stories and decrease the complexity of their stories until they reach it. Force them to front-load their work effort by making them work late.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Soft/interpersonal&lt;/em&gt; skills. Tell them what they’re doing and how it’ll affect them in the long run. Make sure they understand your intentions and that you don’t expect a 2 week turnaround.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also like poetry, if feedback rhymes too much it gets bad. If your situational and behavioral feedback has a strong rhyme, it’s time to move from being a peacetime manager to a wartime manager.&lt;/p&gt;

&lt;h4 id=&quot;gathering-feedback&quot;&gt;Gathering Feedback&lt;/h4&gt;
&lt;p&gt;Feedback should come easily if you are involved with your report’s day-to-day activities. Otherwise, it’s hard and you must rely on others. Regardless, you should be reaching out to your peers and your report’s peers with regularity. Gather multiple sources and keep them anonymous to your report; you do not want them to feel like they need to be careful around specific individuals.&lt;/p&gt;

&lt;p&gt;Do not ask “Do you have any feedback for &amp;lt;report&amp;gt;?” If you get something out of that, it’s going to be festering, stale feedback. You must ask pointed questions, piecemeal, in a conversation to avoid overwhelming them. Some example questions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What could they do today to be better?&lt;/li&gt;
  &lt;li&gt;How often do you speak with them? Is that too much or too little?&lt;/li&gt;
  &lt;li&gt;Do you like working with them? Why or why not?&lt;/li&gt;
  &lt;li&gt;What do they do that grates on you? How about impresses you?&lt;/li&gt;
  &lt;li&gt;Where would you rank them relative to &amp;lt;known exceptional employee&amp;gt;? How about &amp;lt;rising star employee&amp;gt;?&lt;/li&gt;
  &lt;li&gt;What can I do to make them a better coworker?&lt;/li&gt;
  &lt;li&gt;Have they done anything this week that really floored / bothered you?&lt;/li&gt;
  &lt;li&gt;Have they done anything this week that really impressed you?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;manager-feedback&quot;&gt;Manager Feedback&lt;/h3&gt;
&lt;p&gt;1-on-1s should be bidirectional. You spend the first part of 1-on-1s digging for the known unknowns and discussing them. The free time at the tail end of the meeting should be dedicated to finding the unknown unknowns. There’s a lot to be said of this, but recently I’ve added a recurring topic to my 1-on-1s. where, on odd meetings, we reflect on &lt;em&gt;my&lt;/em&gt; performance as a manager. After all, my reports’ fates are intertwined with the quality of my management; if I’m doing an awful job they’ll likely fail with me.&lt;/p&gt;

&lt;p&gt;Here are questions I ask every other 1-on-1:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What could I do to make your job awesome?&lt;/li&gt;
  &lt;li&gt;How am I doing and how could I be doing better?&lt;/li&gt;
  &lt;li&gt;If you had your pick at the company, who would you want to be your manager and why?&lt;/li&gt;
  &lt;li&gt;What should &lt;em&gt;we&lt;/em&gt; be doing that we are not?&lt;/li&gt;
  &lt;li&gt;If I gave you carte blanche this sprint, what would you do for two weeks?&lt;/li&gt;
  &lt;li&gt;Are there any questions that I’m not asking you that I should be?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These questions mean nothing if your report feels like they will be penalized for their answers. Make sure they are aware this isn’t a manager/report discussion, but rather a you/them discussion. If the thought of asking any of these questions makes you uncomfortable or afraid, you need to ask them. &lt;strong&gt;Now.&lt;/strong&gt; That discomfort is a signal that you know something will be brought up.&lt;/p&gt;

&lt;p&gt;At worst, these questions allow reports to feel heard. At best, these questions are a source of discussion, feedback from people who experience your job performance, and make you aware of what’s going well or poorly in your organization.&lt;/p&gt;

&lt;h3 id=&quot;accountability---other-topics&quot;&gt;Accountability - Other Topics&lt;/h3&gt;
&lt;p&gt;Other topics always carry an item to discuss previous TODOs and feedback from previous meetings. This is a reminder for you and your report that you will revisit feedback and expectations each meeting. Leaf through the last month of 1-on-1s and bring up any feedback, discussions, and action items that are still relevant.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Being too busy to have 1-on-1s is the same as being too thirsty to drink. You will become busier when an employee quits due to a circumstance that could have been identified and rectified. When you have to onboard a new hire, you’ll be sacrificing team capacity to get them up to speed. When a senior engineer leaves, you’ll get their their work and distribute it to teammates.&lt;/p&gt;

&lt;p&gt;You can’t cancel 1-on-1s when something critical comes up. Something is always wrong, something is always on fire, something will always be critical. But nothing is more important than your people. You can prevent fires by training, growing, and building relationships your people. You can delegate critical things to people that you trust and have established relationships with.&lt;/p&gt;

&lt;p&gt;1-on-1s are an end to a potential death spiral of being busy, fighting fires, having unhappy employees, and losing important people.&lt;/p&gt;

&lt;h2 id=&quot;extra-reading&quot;&gt;Extra reading&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://a16z.com/2012/08/18/a-good-place-to-work&quot;&gt;A Good Place to Work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Hard-Thing-About-Things-Building-ebook/dp/B00DQ845EA&quot;&gt;The Hard Thing about Hard Things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Making-Manager-What-Everyone-Looks-ebook/dp/B079WNPRL2&quot;&gt;The Making of a Manager: What to Do When Everyone Looks to You&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">One on ones are one of the most important tools that a manager has. You either have effective, regular, clear 1-on-1s or you pay in employee retention, satisfaction, and development.</summary></entry><entry><title type="html">React Pitfalls</title><link href="/react/design/component/mistakes/best/practices/2018/07/06/react-pitfalls.html" rel="alternate" type="text/html" title="React Pitfalls" /><published>2018-07-06T13:00:00-05:00</published><updated>2018-07-06T13:00:00-05:00</updated><id>/react/design/component/mistakes/best/practices/2018/07/06/react-pitfalls</id><content type="html" xml:base="/react/design/component/mistakes/best/practices/2018/07/06/react-pitfalls.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;React has some common pitfalls that I’ve seen developers fall into when designing components. The most common center around readability and performance. Now, there’s easily a dozen &lt;a href=&quot;http://americanexpress.io/clean-code-dirty-code/&quot;&gt;articles&lt;/a&gt; &lt;a href=&quot;https://engineering.musefind.com/our-best-practices-for-writing-react-components-dec3eb5c3fc8&quot;&gt;about&lt;/a&gt; &lt;a href=&quot;https://reactjs.org/docs/thinking-in-react.html&quot;&gt;React&lt;/a&gt; &lt;a href=&quot;https://preact.gitbooks.io/react-book/content/jsx/index.html&quot;&gt;best&lt;/a&gt; &lt;a href=&quot;https://blog.andrewray.me/youre-missing-the-point-of-jsx/&quot;&gt;practices&lt;/a&gt; but these lean abstract with contrived examples. Personally, I find it much easier to see where people made mistakes, see how we fixed them, and then break those examples down.&lt;/p&gt;

&lt;h2 id=&quot;nested-component-definitions&quot;&gt;Nested Component Definitions&lt;/h2&gt;
&lt;p&gt;Defining components within components breaks reusability, causes unnecessary rendering, and crowds files. It’s particularly tempting to nest components when one component needs variables from the other, but it leads to coupling. Nesting components will always lead to rerenders of child compoents when any prop in the parent component is changed. Fortunately, it’s easy to fix and fairly easy to diagnose.&lt;/p&gt;

&lt;h3 id=&quot;recommended-reading&quot;&gt;Recommended Reading&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/rendering-elements.html&quot;&gt;React Documentation: rendering elements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@ryanbas21/react-reconciliation-7075e3f07437&quot;&gt;React Reconciliation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bad&quot;&gt;Bad&lt;/h3&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;small&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Header&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Spacer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;small&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/React.Fragment&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Header&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Footer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Footer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Card&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here you can see a section component which, within it, defines an Item component and a Content component. Defining an internal Content component here is only a coupling issue. However, defining Item within this component is going to cause some pain. Item is defined within this component because it’s only used by Section and it needs sectionId and onChange from Section.&lt;/p&gt;

&lt;p&gt;However, defining the component within Section causes Item to be redefined and rerendered every time any Section prop changes. Any Inputs on the page will be destroyed and mounted again within the DOM. If you were typing into an Input component and a Section prop changed, your focus would be lost. I’ve ran into this scenario quite a few times— onChange updates Section’s items which causes a rerender.&lt;/p&gt;

&lt;p&gt;If Item were moved outside of Section, React would behave differently.&lt;/p&gt;

&lt;h3 id=&quot;good&quot;&gt;Good&lt;/h3&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sectionId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;small&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Header&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Spacer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;small&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/React.Fragment&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;sectionId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sectionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Header&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Footer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Footer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Card&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As mentioned above, with Item defined outside of section any changes to Section’s props which don’t affect Item’s props will not cause a rerender. &lt;a href=&quot;https://reactjs.org/docs/rendering-elements.html#react-only-updates-whats-necessary&quot;&gt;Only components with modified props will be updated&lt;/a&gt;. Input’s focus will not be lost as long as its props aren’t changed. We save unnecessary renders here and remove future coupling issues.&lt;/p&gt;

&lt;h2 id=&quot;abusing-keys&quot;&gt;Abusing Keys&lt;/h2&gt;
&lt;p&gt;Keys in React are used when returning procedurally generated components. One of the most common uses is an array of values which will be individually passed into equally many components, as can be seen below. React’s &lt;a href=&quot;https://reactjs.org/docs/lists-and-keys.html#keys&quot;&gt;documentation describes this well&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, keys aren’t always available inside a data source. When not available, keys can be chosen that aren’t stable between renders or not unique among sibling components. React’s documentation &lt;a href=&quot;https://reactjs.org/docs/reconciliation.html#tradeoffs&quot;&gt;mentions this&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keys should be stable, predictable, and unique. Unstable keys (like those produced by Math.random()) will cause many component instances and DOM nodes to be unnecessarily recreated, which can cause performance degradation and lost state in child components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a pinch, using the array index may suffice. However, I’m in the camp that index as a key is an antipattern; you only do this until you encounter a bug from it. Bugs resulting from index as a key are incredibly difficulty to diagnose; they usually arise from where components that have state are change keys. The bug’s symptoms will be varied: maybe state tranfers when an element is deleted from an index, or maybe it gets a random state from an older component. You don’t want to learn the symptoms.&lt;/p&gt;

&lt;h3 id=&quot;recommended-reading-1&quot;&gt;Recommended Reading&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318&quot;&gt;Index as a key is an antipattern&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/lists-and-keys.html&quot;&gt;React documentation: Keys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/reconciliation.html#recursing-on-children&quot;&gt;React documentation: Recursing on Children&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bad-1&quot;&gt;Bad&lt;/h3&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shortid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'shortid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Quiz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sections&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;sections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Section&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shortid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;
          &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re using &lt;a href=&quot;https://github.com/dylang/shortid#usage&quot;&gt;shortid&lt;/a&gt; to generate a unique, per render random key for our sections. This would be a nonissue if sections never change position or the list never changes size. However, if sections does change, it’s possible that there could be &lt;a href=&quot;https://reactjs.org/docs/reconciliation.html#recursing-on-children&quot;&gt;performance issues&lt;/a&gt; or &lt;a href=&quot;https://codepen.io/anon/pen/ParyQq&quot;&gt;state bugs&lt;/a&gt;. This can sometimes be easy to solve… sometimes it’s not.&lt;/p&gt;

&lt;h3 id=&quot;good-1&quot;&gt;Good&lt;/h3&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Quiz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sections&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;sections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Section&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The shortid is now swapped for label, which in this case is both unique among all sections and consistent. If you can’t find a key that’s unique, you may find yourself resorting to using an index, but that should be &lt;a href=&quot;https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318&quot;&gt;a last resort&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;redux-overloading-mapstatetoprops&quot;&gt;Redux: Overloading mapStateToProps&lt;/h2&gt;
&lt;p&gt;With Redux, &lt;a href=&quot;https://github.com/reduxjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt;mapStateToProps&lt;/a&gt; is used to subscribe to updates from the store. Any time the store is updated, every component decorated with connect will have its mapStateToProps called. The output of mapStateToProps is then passed to the component via props.&lt;/p&gt;

&lt;p&gt;Since mapStateToProps is called on every update, React applications which heavily utilize the store could see a performance impact. For example, if you are storing &lt;a href=&quot;https://redux-form.com/7.3.0/&quot;&gt;the contents of a form&lt;/a&gt; in Redux, every letter typed into a form by a user may trigger a store update. Depending on how your application is laid out, this would trigger every mapStateToProps on every keypress, and possibly trigger rerenders if those result in prop changes.&lt;/p&gt;

&lt;p&gt;If there are any mapStateToProps functions that do expensive calculation, such as computing the initial values for the form which a user is inputting into, those will be recalculated &lt;em&gt;every time a change occurs&lt;/em&gt;. Since the initial state of a form likely wouldn’t change from user input, it wouldn’t affect the output for mapStateToProps here. However, the calculation would still happen under the hood.&lt;/p&gt;

&lt;p&gt;One workaround here is to use &lt;a href=&quot;https://github.com/reduxjs/reselect&quot;&gt;Reselect&lt;/a&gt; in any place where you are performing complex logic within mapStateToProps. Reselect, which behaves very similarly to mapStateToProps, creates a selector. When defining a selector, it needs a list of input functions which will be used to get a list of outputs. The list of outputs are then passed to a result function, which should have any expensive computation in it. From Reselect’s documentation:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// createSelector(...inputSelectors | [inputSelectors], resultFunc)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalSelector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value2&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This example is very simple, but it demonstrates basic usage well. Here we created a selector with two input selectors that grab values from the store. These values are passed through to the result function passed as a second argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;createSelector&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;totalSelector&lt;/code&gt; would be used in your mapStateToProps:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;totalOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;totalSelector&lt;/code&gt; is memoized; it is only called when one of its input selectors return a different value. So if &lt;code class=&quot;highlighter-rouge&quot;&gt;value1 + value2&lt;/code&gt; were an expensive operation that rarely occurred, it would only be called if the two input selectors had changed. This stops expensive computations from occurring when they will provide the same output.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/optimizing-performance.html&quot;&gt;Optimizing React Performance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/markerikson/react-redux-links/blob/master/react-architecture.md&quot;&gt;Comprehensive React article list for architecting applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Introduction React has some common pitfalls that I’ve seen developers fall into when designing components. The most common center around readability and performance. Now, there’s easily a dozen articles about React best practices but these lean abstract with contrived examples. Personally, I find it much easier to see where people made mistakes, see how we fixed them, and then break those examples down.</summary></entry><entry><title type="html">Creating a Gatling Simulation</title><link href="/gatling/simulation/getting/started/2017/03/21/creating-a-simple-gatling-simulation.html" rel="alternate" type="text/html" title="Creating a Gatling Simulation" /><published>2017-03-21T08:41:00-05:00</published><updated>2017-03-21T08:41:00-05:00</updated><id>/gatling/simulation/getting/started/2017/03/21/creating-a-simple-gatling-simulation</id><content type="html" xml:base="/gatling/simulation/getting/started/2017/03/21/creating-a-simple-gatling-simulation.html">&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;I could not find material online that targeted the latest version of Gatling, meant for someone without
a great deal of functional experience. I also don’t mean for this to be comprehensive; I just hope
this serves as a starting point to jump off to official documentation.&lt;/p&gt;

&lt;h2 id=&quot;recommended-reading&quot;&gt;Recommended Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.jenkster.com/2015/12/what-is-functional-programming.html&quot;&gt;What is functional programming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.scala-lang.org/documentation/&quot;&gt;Scala documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gatling.io/docs/current/&quot;&gt;Gatling documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-gatling&quot;&gt;What is Gatling&lt;/h2&gt;
&lt;p&gt;Gatling is a load testing framework written in Scala. It efficiently simulates HTTP traffic
in a way which allows thousands of concurrent users from a single machine. Gatling does not parse HTML
or run Javascript; if this is your objective you will need to look
&lt;a href=&quot;https://github.com/nmeans/phantomherd&quot;&gt;elsewhere&lt;/a&gt; for that. However, by not rendering HTML,
loading dependencies, or running Javascript, Gatling scales incredibly well.&lt;/p&gt;

&lt;p&gt;There are two ways to begin writing a simulation: use the recorder for a basic starting simulation, or
manually write one from scratch. As I did not have the luxury of starting with a recorder,
I cannot discuss how to begin that way. I would imagine, however, that even if you record a simulation,
you will still be editing it. So, most of this post will be covering how to manually write a
Gatling simulation. I’ve provided a sample Gatling project to help follow along
&lt;a href=&quot;https://github.com/brhoades/example-gatling-simulation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;recording-a-simulation&quot;&gt;Recording a Simulation&lt;/h1&gt;
&lt;p&gt;Gatling supports recording simulations using its
&lt;a href=&quot;http://gatling.io/docs/current/http/recorder/&quot;&gt;HTTP recorder&lt;/a&gt;. It acts as a proxy which records
all traffic between a browser and a server and then saves it into a simulation. If the target
website is not https or a custom, self-signed certificate can be used, this method
of creating simulations is ideal. For the website I started load testing,
it wasn’t possible to use this recorder, so I am unaware of most of its functionality.&lt;/p&gt;

&lt;h1 id=&quot;manually-creating-a-simulation&quot;&gt;Manually Creating a Simulation&lt;/h1&gt;
&lt;p&gt;Structuring a simulation is defined at length &lt;a href=&quot;http://gatling.io/docs/current/general/simulation_structure/&quot;&gt;here&lt;/a&gt;, but a minimal functioning example helps illustrate this:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;simpleexample&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.gatling.core.Predef._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.gatling.http.Predef._&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleSimulation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Simulation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpConf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://google.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acceptHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doNotTrackHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acceptLanguageHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en-US,en;q=0.5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acceptEncodingHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gzip, deflate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userAgentHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scenario Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Main Page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atOnceUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protocols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This simulation loads https://google.com/ with the provided HTTP headers with a single user.
The Simulation above describes a single scenario, although there can be many. This scenario
has a single HTTP chain “Main Page”; it visits &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; relative to the baseURL described in
our &lt;code class=&quot;highlighter-rouge&quot;&gt;httpConf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;setUp&lt;/code&gt; function called at the end of the class definition is what defines the simulation’s execution
parameters. In this case, a single user immediately begins the scenario, walking through the single
step of getting &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;. There are many other options for defining
&lt;a href=&quot;http://gatling.io/docs/current/session/feeder/&quot;&gt;how user(s) enter the simulation&lt;/a&gt; and
&lt;a href=&quot;http://gatling.io/docs/current/general/simulation_setup/&quot;&gt;at what rate they enter the simulation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The output of the example simulation above is the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Simulation simpleexample.ExampleSimulation started...

================================================================================
2017-03-15 12:47:51                                           2s elapsed
---- Requests ------------------------------------------------------------------
&amp;gt; Global                                                   (OK=2      KO=0     )
&amp;gt; Main Page                                                (OK=1      KO=0     )
&amp;gt; Main Page Redirect 1                                     (OK=1      KO=0     )

---- Scenario Name -------------------------------------------------------------
[##########################################################################]100%
          waiting: 0      / active: 0      / done:1
================================================================================

Simulation simpleexample.ExampleSimulation completed in 0 seconds
Parsing log file(s)...
Parsing log file(s) done
Generating reports...

================================================================================
---- Global Information --------------------------------------------------------
&amp;gt; request count                                          2 (OK=2      KO=0     )
&amp;gt; min response time                                    159 (OK=159    KO=-     )
&amp;gt; max response time                                    477 (OK=477    KO=-     )
&amp;gt; mean response time                                   318 (OK=318    KO=-     )
&amp;gt; std deviation                                        159 (OK=159    KO=-     )
&amp;gt; response time 50th percentile                        318 (OK=318    KO=-     )
&amp;gt; response time 75th percentile                        398 (OK=398    KO=-     )
&amp;gt; response time 95th percentile                        461 (OK=461    KO=-     )
&amp;gt; response time 99th percentile                        474 (OK=474    KO=-     )
&amp;gt; mean requests/sec                                      2 (OK=2      KO=-     )
---- Response Time Distribution ------------------------------------------------
&amp;gt; t &amp;lt; 800 ms                                             2 (100%)
&amp;gt; 800 ms &amp;lt; t &amp;lt; 1200 ms                                   0 (  0%)
&amp;gt; t &amp;gt; 1200 ms                                            0 (  0%)
&amp;gt; failed                                                 0 (  0%)
================================================================================

Reports generated in 0s.
Please open the following file: target/gatling/examplesimulation-1489600069122/index.html
[info] Simulation ExampleSimulation successful.
[info] Simulation(s) execution ended.
[success] Total time: 8 s, completed Mar 15, 2017 12:47:52 PM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Extended report information can be found in the linked report HTML file. Simulation status
is output while the simulation runs, displaying the number of errors with their details, if
there are any.&lt;/p&gt;

&lt;p&gt;It can be seen that when visiting the site’s root, a redirect occurred. By default, Gatling
follows all redirects on an HTTP chain and labels them as “Name - Redirect #”. This behavior
can disabled globally, per chain, and capped. More information about redirect configuration
&lt;a href=&quot;http://gatling.io/docs/current/http/http_protocol/#follow-redirects&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;chaining-requests&quot;&gt;Chaining Requests&lt;/h2&gt;
&lt;p&gt;In the example simulation above, there was a single request to a single page. For useful simulations,
there will likely be more than one request. As each call to exec returns the modified
scenario object, scenarios can be chained to perform more complex behaviors.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scenario Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Main Page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Search&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/?q=Some+Query&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This scenario now also runs a search, visiting https://google.com/?q=Some+Query. Cookies and other
session data are retained and passed between each exec call. Redirects will still be followed at
each step, then continued on the next step. The HTTP protocol supports POST requests,
cookies, redirects, and more complex configurations with proxies. More on this later.&lt;/p&gt;

&lt;h2 id=&quot;assertions&quot;&gt;Assertions&lt;/h2&gt;
&lt;p&gt;Assertions can be used to verify that responses contain expected content. One of the most basic
assertions is for status codes. For example, if we we wanted our scenario to verify that
the Google main page returned HTTP200:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scenario Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Main Page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Search&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/?q=Some+Query&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If there was not an HTTP200, the scenario would print the name of the request, &lt;code class=&quot;highlighter-rouge&quot;&gt;'Main Page'&lt;/code&gt;, and state
the expected and found status codes. This would count as a KO in the statistics output as well:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&amp;gt; Global                                                   (OK=1      KO=1     )
&amp;gt; Main Page                                                (OK=0      KO=1     )
&amp;gt; Search                                                   (OK=1      KO=0     )
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Which signifies that this particular request failed to pass validation. &lt;strong&gt;Note that the simulation
continues&lt;/strong&gt; even though there was a failure at a prior step. There are
&lt;a href=&quot;http://gatling.io/docs/current/general/scenario/#exithereiffailed&quot;&gt;methods which work around this&lt;/a&gt;,
which can be useful when authentication fails.&lt;/p&gt;

&lt;p&gt;CSS selectors are also used to verify content on pages. For example, if we wanted to ensure
that the main page had an &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; node with the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; set to &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scenario Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Main Page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html[size]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mobile&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A great deal of other assertions exist for optionality, performance, header values,
performance requirements, etc. More details are available
&lt;a href=&quot;http://gatling.io/docs/current/general/assertions/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;session-modification-and-inspection&quot;&gt;Session Modification and Inspection&lt;/h2&gt;
&lt;p&gt;Sessions are implicitly passed between each exec call. They can manually inspected or modified
during scenario definition by executing a custom function with exec.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scenario Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Main Page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bla&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above is the same scenario as our first one. However, this scenario prints the session,
sets “hello” in the session to “bla”, then prints it again. &lt;em&gt;Note: if you are not sure why
session is being repeated after printing it, try to only print it and see what happens.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is the output:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Simulation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simpleexample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExampleSimulation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;started&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Scenario&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ShuffleJdkNameResolver&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;582701&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redirects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c5ead52&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CookieJar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;CookieKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,/)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoredCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SkqwEzuPt4c2J&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cwZMPjX0rPxHeZHWTiDaeyEvQr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;82D&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h0NlSie_-trLh9SO9OfYVed4nShyQv0wFIWUnyCDsshfjsEgE0M5eYT_W3Hn2Jm20vxV56nyq4q7uRvM96bP8qnL_HPAfiMH2fXb4w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=/;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1489611434846&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/),&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1489611433728&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ProtocolComponentsRegistry$$Lambda$149&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;418118518&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@c4d1ae6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Scenario&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ShuffleJdkNameResolver&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;582701&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redirects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c5ead52&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CookieJar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;CookieKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,/)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoredCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SkqwEzuPt4c2J&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cwZMPjX0rPxHeZHWTiDaeyEvQr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;82D&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h0NlSie_-trLh9SO9OfYVed4nShyQv0wFIWUnyCDsshfjsEgE0M5eYT_W3Hn2Jm20vxV56nyq4q7uRvM96bP8qnL_HPAfiMH2fXb4w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=/;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1489611434846&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bla&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1489611433728&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ProtocolComponentsRegistry$$Lambda$149&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;418118518&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@c4d1ae6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In between the first and second session output, I set “hello” to “bla” which can be see in the second session.
This is the primary mechanism to inspect and modify the session from the level of scenario definition.&lt;/p&gt;

&lt;h2 id=&quot;post-requests-and-session-access&quot;&gt;POST Requests and Session Access&lt;/h2&gt;
&lt;p&gt;POST requests typically make use of the
&lt;a href=&quot;http://gatling.io/docs/current/http/http_check/#http-check-saving&quot;&gt;saveAs&lt;/a&gt;
assertion in order to retain response details from a previous server response. However, this doesn’t
always have to be the case. Here’s a contrived simulation below for the sake of an easy example:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scenario Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Login Form&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form[action]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form_action&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input[name='csrf_token']&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;csrf_token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Login (POST)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${form_action}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;csrf_token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;${csrf_token}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login_username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;someuser&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login_password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;somepassword&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few new things here; let’s begin with the &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; HTTP chain method. This method behaves similarly
to &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;, but typically uses some sort of input. There are
&lt;a href=&quot;http://gatling.io/docs/current/http/http_request/#form-parameters&quot;&gt;other methods&lt;/a&gt; which allow the use
of &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt;s, but here we will manually build our request data using &lt;code class=&quot;highlighter-rouge&quot;&gt;formParam&lt;/code&gt;. These parameters are
sent to the url specified in the &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; method’s first argument as a response using the keys and
values specified.&lt;/p&gt;

&lt;p&gt;In this example the form’s action value was captured and saved into “form_action” on the session.
The next POST request then read from the session using a bash-like syntax, &lt;code class=&quot;highlighter-rouge&quot;&gt;${keyname}&lt;/code&gt;. This reads
the key from the session &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; directly, and will print warning if it’s not found. Once the POST is complete,
the status will be checked to verify the server responded with HTTP200.&lt;/p&gt;

&lt;p&gt;Further information about the HTTP protocol is also available on the
&lt;a href=&quot;http://gatling.io/docs/current/http/&quot;&gt;official documentation page&lt;/a&gt;. Information regarding the session
object be found &lt;a href=&quot;http://gatling.io/docs/current/session/session_api/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;distribution&quot;&gt;Distribution&lt;/h2&gt;
&lt;p&gt;Gatling plugins exist for both &lt;a href=&quot;http://gatling.io/docs/current/extensions/sbt_plugin/&quot;&gt;sbt&lt;/a&gt; and
&lt;a href=&quot;https://github.com/lkishalmi/gradle-gatling-plugin&quot;&gt;Gradle&lt;/a&gt;. Both work very well, however the sbt
plugin is an official extension to Gatling and contains the most comprehensive documentation and examples.
Unless Gatling is being added to an existing Gradle project, I would highly recommend using the sbt
extension. As the &lt;a href=&quot;http://gatling.io/docs/current/extensions/sbt_plugin/&quot;&gt;official documentation&lt;/a&gt; does
not explicitly state this, here is a minimal collection of files to get an sbt project running:&lt;/p&gt;

&lt;p&gt;Your project tree, for a standalone sbt project, should look similar to this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── build.sbt
├── project
│   ├── build.properties
│   └── plugins.sbt
└── src
    └── test
        ├── resources
        └── scala
            └── simpleexample
                └── ExampleSimulation.scala
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;build.sbt&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enablePlugins(GatlingPlugin)

scalaVersion := &quot;2.11.8&quot;

scalacOptions := Seq(
  &quot;-encoding&quot;, &quot;UTF-8&quot;, &quot;-target:jvm-1.8&quot;, &quot;-deprecation&quot;,
  &quot;-feature&quot;, &quot;-unchecked&quot;, &quot;-language:implicitConversions&quot;, &quot;-language:postfixOps&quot;)

libraryDependencies += &quot;io.gatling.highcharts&quot; % &quot;gatling-charts-highcharts&quot; % &quot;2.2.4&quot; % &quot;test,it&quot;
libraryDependencies += &quot;io.gatling&quot;            % &quot;gatling-test-framework&quot;    % &quot;2.2.4&quot; % &quot;test,it&quot;

addCompilerPlugin(&quot;org.psywerx.hairyfotr&quot; %% &quot;linter&quot; % &quot;0.1.17&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;project/build.properties&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sbt.version=0.13.13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;project/plugins.sbt&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addSbtPlugin(&quot;io.gatling&quot; % &quot;gatling-sbt&quot; % &quot;2.2.1&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the above files are set up, install sbt and run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sbt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then simulations may be run either from the sbt shell:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sbt
&amp;gt; gatling:testOnly somepackage.GeneralBrowse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or, instead, from your shell:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sbt &quot;gatling:testOnly somepackage.GeneralBrowse&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reports can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;/target/gatling/&lt;/code&gt; and the last report can be opened in a web browser
with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sbt gatling:lastReport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A list of all sbt tasks are available &lt;a href=&quot;http://gatling.io/docs/current/extensions/sbt_plugin/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;reference-material&quot;&gt;Reference Material&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://gatling.io/docs/current/cheat-sheet/&quot;&gt;Gatling cheat sheet&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Background I could not find material online that targeted the latest version of Gatling, meant for someone without a great deal of functional experience. I also don’t mean for this to be comprehensive; I just hope this serves as a starting point to jump off to official documentation.</summary></entry><entry><title type="html">Markov Chain Speech Generation Part 1: Background</title><link href="/markov/chain/marko/ruby/bot/irc/2017/02/20/my-first-markov-chain-bot.html" rel="alternate" type="text/html" title="Markov Chain Speech Generation Part 1: Background" /><published>2017-02-20T00:00:00-06:00</published><updated>2017-02-20T00:00:00-06:00</updated><id>/markov/chain/marko/ruby/bot/irc/2017/02/20/my-first-markov-chain-bot</id><content type="html" xml:base="/markov/chain/marko/ruby/bot/irc/2017/02/20/my-first-markov-chain-bot.html">&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;http://underscorejs.org/underscore-min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/assets/javascripts/dist/cytoscape.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.rawgit.com/cytoscape/cytoscape.js-spread/1.2.0/cytoscape-spread.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/assets/javascripts/markov.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;p&gt;Back around 2006, some friends and I had an IRC bot that we lovingly named superborg. Superborg would join channels and log any text it saw into a flatfile. After a while, it would randomly respond to a message with a cobbled together phrase from those stored messages. Typically, those phrases sounded incoherent, but every once in a while it would randomly create a real gem. In our excitement with superborg’s learning, we loaded it up hundreds of megabytes of Shakespeare, Wikipedia, and old speech transcripts.&lt;/p&gt;

&lt;p&gt;Superborg got really bogged down; its responses slowed and they became increasingly schizophrenic. Although I knew superborg was open source and even had experience in C, I was quite green. Objects and algorithms were words to me, so when I delved into &lt;a href=&quot;https://github.com/hmage/seeborg&quot;&gt;seeborg&lt;/a&gt;’s source code, I ran the other way. However, the bot’s idea stuck with me for many years.&lt;/p&gt;

&lt;h2 id=&quot;markov-chains&quot;&gt;Markov Chains&lt;/h2&gt;
&lt;p&gt;Seeborg came up in a discussion with &lt;a href=&quot;https://web.mst.edu/~nmjxv3/&quot;&gt;Nathasha Jarus&lt;/a&gt; in November 2013. Nat had started a project a while before this conversation which aimed to make an IRC bot using the same underlying algorithm as seeborg, &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain&quot;&gt;Markov chains&lt;/a&gt;. Markov chains have many, many applications which I won’t even reference. I will instead explore a very specific niche where they can be used to generate speech.&lt;/p&gt;

&lt;p&gt;Markov chains, for the purposes of an IRC bot, are best represented by directional graphs. Each node in this graph will hold data (a “word”) and each edge will have a number, (0, 1], representing the probability of traversing this edge. Below is a visualization of a Markov chain with 3 nodes:&lt;/p&gt;

&lt;div id=&quot;markov-chain&quot; class=&quot;markov-graph&quot; style=&quot;width: 768px; height: 175px;&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  markov.graphs.renderFirstExample(&quot;#markov-chain&quot;);
&lt;/script&gt;

&lt;p&gt;This chain’s three nodes all have edges with a probability of 1.0 and some arbitrary data “data”. It will always be the case that the sum of each node’s outward edges will be 1.0; however, on average, in a Markov chain bot there will be more than one edge. As there is only one edge from each node in this graph, the traversal of this graph will always be the same.&lt;/p&gt;

&lt;h1 id=&quot;with-words&quot;&gt;With words&lt;/h1&gt;

&lt;p&gt;When “data” is swapped out for words in a couple of sentences (which I’ll refer to a sources or source text) the application becomes a bit more clear:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A dog jumps over the log&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bear jumps clear of harm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that with capitalization, there is only one word, “jumps”, which is common to both sentences. A Markov chain would combine those words into a single node with two input edges and one output. This can be seen below.&lt;/p&gt;

&lt;div id=&quot;markov-chain-sentence&quot; class=&quot;markov-graph&quot; style=&quot;width: 768px; height: 300px;&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  markov.graphs.renderSecondExample(&quot;#markov-chain-sentence&quot;);
&lt;/script&gt;

&lt;p&gt;When starting from the beginning of both of these chains, each movement along an edge to next node has 100% probability. However, once reaching the “jump” node, there’s a 50% (0.5) chance of going to either destination. This comes from our original sentences where there are two distinct possibilities of what follows jumps, with one occurance of each. This gave each edge a probability of 0.5 (1/2). The decision of which edge to traverse will be made randomly by a program. For this Markov chain, there are 4 outputs which are all fairly coherent:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A dog jumps over the log&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bear jumps clear of harm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The dog jumps clear of harm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bear jumps over the log&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The chance of each output when traversing this chain, starting from a leftmost node randomly, is 25%.&lt;/p&gt;

&lt;h1 id=&quot;duplicate-sources&quot;&gt;Duplicate sources&lt;/h1&gt;

&lt;p&gt;Now, if instead the source text had instead been:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A dog jumps over the log&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A dog jumps over the log&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bear jumps clear of harm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;markov-chain-sentence-two&quot; class=&quot;markov-graph&quot; style=&quot;width: 768px; height: 300px;&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  markov.graphs.renderThirdExample(&quot;#markov-chain-sentence-two&quot;);
&lt;/script&gt;

&lt;p&gt;What held in the previous example still holds here: since there are two source sentences which have the transition “jumps” to “over”, and one for “jumps” to “clear”, the weight for each is 0.67 (2/3) and 0.33 (1/3) respectively. Traversing this graph after randomly choosing a leftmost node gives the following chances for each output sentence:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A dog jumps over the log&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;33.3% (1/3)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bear jumps clear of harm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;16.7% (1/6)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The dog jumps clear of harm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;16.7% (1/6)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bear jumps over the log&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;33.3% (1/3)&lt;/p&gt;

&lt;h1 id=&quot;n-grams&quot;&gt;n-grams&lt;/h1&gt;
&lt;p&gt;In the last example, by traversing a Markov chain we generated four possible sentences as output. These sentences were based entirely on the source text; if sentences were generated at scale in a large number of trials, the number of times specific fragments (subchain after a non-1.0 decision in this case) appeared would be proportional to frequency in the source text. This follows as the probabilites for these words appearing is equal to their frequency in the source text.&lt;/p&gt;

&lt;p&gt;As more source text is added, the responses will become exponentially more diverse. At the same time, the total number of branch points where context can be lost will increase as well. The method I described above where each word in a sentence is a node is arbitrary— one I’ve chosen as I felt it was easy to explain. It worked well in the examples provided as, although the set of possible node values (words) was incredibly large,  I only selected a handful of them.&lt;/p&gt;

&lt;p&gt;It’s easy to demonstrate how this method fails at scale by choosing a node value with a smaller set of possible values. Let’s use letters, where our source text will be individual words. In theory, Markov chains would be able to randomly make new words using whatever source text we provide.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/scripts/markov/100words.json&quot;&gt;Here’s the list of 100 words&lt;/a&gt; we will use as a source to make a Markov chain from. Click “Create a word” below to start.&lt;/p&gt;

&lt;div id=&quot;markov-chain-letter-graph&quot; class=&quot;markov-graph&quot; style=&quot;height: 600px; width: 768px;&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div id=&quot;built-word&quot; style=&quot;height: 25px;&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;a id=&quot;build-word&quot; href=&quot;#&quot;&gt;Create a word&lt;/a&gt;
&lt;script&gt;
  $('#build-word').on('click', function(e) { e.preventDefault(); $('#built-word').text(''); markov.graphs.generateWord(3, &quot;#built-word&quot;); });
  markov.graphs.renderFourthExample();
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;A few notes regarding some non-letter symbols. “^” represents an arbitrary start of a word. This entry node in our graph ensures that the first letter on each word is in proportion with our source. “$”, similarly, represents the end of a word, and ensures that letters which typically end words have that probability represented.&lt;/p&gt;

&lt;p&gt;For the simplicity of the generation, the generated words do a lot right: “u” always follows “q”, letters such as “y” usually end words, and most &lt;a href=&quot;https://en.wikipedia.org/wiki/Consonant_cluster&quot;&gt;consonant clusters&lt;/a&gt; and syllables in the words all appear in English. But there are also some drawbacks; the generated words can sometimes loop due to the cycles in this graph (much more on that later) and become incredibly long. There are also consonant clusters which never begin or never end a syllable that do— for example, “nt” in English does not begin syllables nor does “pl” end syllables.&lt;/p&gt;

&lt;p&gt;These drawbacks are all caused by a loss in context by the Markov chain. While it’s traversing the graph, there’s no way for it to represent the relationship between “pl” and “a”, all it has is that “l” is preceded by “p” and followed by “l”. One method for storing this relationship is by using n-grams. Our current representation could be considered a 1-gram; if we instead used a bigram, we could represent the relationship between “pl” and “a-“ where “a- is followed by another letter.”&lt;/p&gt;

&lt;p&gt;Below is yet another example of a Markov chain which does just that. You can also click “Create a word” to see how the output is.&lt;/p&gt;

&lt;div id=&quot;markov-chain-digram-graph&quot; class=&quot;markov-graph&quot; style=&quot;height: 800px; width: 800px;&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div id=&quot;built-word-2&quot; style=&quot;height: 25px;&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;javascript:$('#built-word-2').text(''); markov.graphs.generateWord(4, '#built-word-2');&quot;&gt;Create a word&lt;/a&gt;&lt;/p&gt;

&lt;script&gt;
  markov.graphs.renderFifthExample();
&lt;/script&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>